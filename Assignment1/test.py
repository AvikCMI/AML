# -*- coding: utf-8 -*-
"""test

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ut_URHbfC93-2dmeez1hqGLXaDq8XjSs
"""

import score
import joblib
import numpy as np
import os
import requests
import subprocess
import time
import unittest

filename = "best_model.joblib"
best_model = joblib.load(filename)
# sent1 = "Hi, the SEXYCHAT girls are waiting for you to text them. Text now for a great night chatting. send STOP to stop this service"
# sent2 = "Hi, I'm Avik Das. I am fond of reading science fiction."
# sent3 = "call this number, you will get reward. Don't miss the opportunity."

# threshold_list = [0,0.1,0.3,0.5,0.7,0.9,1]

# passed_test = 0

def smoke_test(txt, threshold):
  pred,prop = (None,None)
  pred,prop = score(txt, best_model, threshold)
  if pred != None:
    if prop != None:
      return ("smoke_test passed")
  return ("smoke_test failed")
    
def format_test(txt, threshold):
  pred,prop = score(txt, best_model, threshold)
  if type(txt) == str:
    if type(threshold) == float:
      if type(pred) == np.int64:
        if type(prop) == np.float64:
          return ("format_test passed")
  return ("format_test failed")

def pred_test(txt, threshold):
  pred,prop = score(txt, best_model, threshold)
  if pred == 0 or pred == 1:
    return ("pred_test passed")
  return ("pred_test failed")

def prop_test(txt, threshold):
  pred,prop = score(txt, best_model, threshold)
  if prop >= 0 and prop <= 1:
    return ("prop_test passed")
  return ("prop_test failed")

def threshold_test_0(txt):
  pred,prop = score(txt, best_model, 0)
  if pred == 1:
    return ("threshold_test_0 passed")
  return ("threshold_test_0 failed")

def threshold_test_1(txt):
  pred,prop = score(txt, best_model, 1)
  if pred == 0:
    return ("threshold_test_1 passed")
  return ("threshold_test_1 failed")

def spam_test(txt, threshold):
  pred,prop = score(txt, best_model, threshold)
  if pred == 1:
    return ("spam_test passed")
  return ("spam_test failed")

def ham_test(txt, threshold):
  pred,prop = score(txt, best_model, threshold)
  if pred == 0:
    return ("ham_test passed")
  return ("ham_test failed")

def test_score(txt, threshold = 0.5, smoke_test = False, format_test = False, 
               pred_test = False, prep_test = False, threshold_test_0 = False,
               threshold_test_1 = False, spam_test = False, ham_test = False):
  if smoke_test == True:
    smoke_test(txt, threshold)
  if format_test == True:
    format_test(txt, threshold)
  if pred_test == True:
    pred_test(txt, threshold)
  if prep_test == True:
    prep_test(txt, threshold)
  if threshold_test_0 == True:
    threshold_test_0(txt)
  if threshold_test_1 == True:
    threshold_test_1(txt)
  if spam_test == True:
    spam_test(txt, threshold)
  if ham_test == True:
    ham_test(txt, threshold)

class TestFlask(unittest.TestCase):
  def test_flask(self):
    # Launch the Flask app using os.system
    os.system('python app.py &')

    # Wait for the app to start up
    time.sleep(1)

    # Make a request to the endpoint
    response = requests.get('http://127.0.0.1:5000/')
    print(response.status_code)

    # Assert that the response is what we expect
    self.assertEqual(response.status_code, 200)
    print("OK")
    self.assertEqual(type(response.text), str)
    print("OKAY")

    # Shut down the Flask app using os.system
    os.system('kill $(lsof -t -i:5000)')


if __name__ == '__main__':
    unittest.main()