# -*- coding: utf-8 -*-
"""score.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IbHEAChghAKclT5lSzv-NhqAbCYoaohq
"""

import joblib
import sklearn
from sklearn.feature_extraction.text import TfidfVectorizer
path = "https://github.com/AvikCMI/AML/tree/main/Assignment1"
model_name = "Best_model_mlp.joblib"
model = joblib.load(path + model_name)
def score(text:str, model,threshold:float):
    text = [text]
    feature_sentence = TfidfVectorizer(min_df = 1, stop_words='english', lowercase=True)
    features = feature_sentence.fit_transform(text)
    predicted = model.predict(features.toarray())
    propensity = model.predict_proba(features.toarray())[1]
    return predicted, propensity
print(score("Rishika is someone who knows how to play the long ball, do you?", model,threshold = 0)[0])
def test_score(score()):
    pass

import joblib
import sklearn
# from sklearn.feature_extraction.text import TfidfVectorizer
model = joblib.load("/content/best_model.joblib")
def score(text:str, model,threshold:float):
    text = [text]
    feature_sentence = TfidfVectorizer(min_df = 1, stop_words='english', lowercase=True)
    features = feature_sentence.fit_transform(text)
    predicted = model.predict(features.toarray())
    propensity = model.predict_proba(features.toarray())[1]
    return predicted, propensity
print(score("Rishika is someone who knows how to play the long ball, do you?", model,threshold = 0)[0])
# def test_score(score()):
#     pass

#confusion matrix for Decision Tree

from sklearn import metrics
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

f = open("SVM.txt", "w")

accuracy_score = metrics.accuracy_score(test_Y, pred_Y)

con_matrix = confusion_matrix(test_Y,pred_Y, labels=[0,1])

report_matrix = classification_report(test_Y, pred_Y,labels=[0,1])

L = [str(accuracy_score),"\n\n",str(con_matrix),'\n\n', str(report_matrix)] 
f.writelines(L) 
f.close()

from sklearn.metrics import ConfusionMatrixDisplay

fig = plt.figure()
Disp =ConfusionMatrixDisplay(con_matrix,display_labels=['ham','spam'])
Disp.plot()
plt.savefig("SVM_confusion_matrix")
plt.close(fig)